	.data
	.align	2
_9:	.word	0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,13,13,13,13,13,13,13,13,13,14,14,14,14,14,14,14,14,14,15,15,15,15,15,15,15,15,15,16,16,16,16,16,16,16,16,16,17,17,17,17,17,17,17,17,17,18,18,18,18,18,18,18,18,18,19,19,19,19,19,19,19,19,19,20,20,20,20,20,20,20,20,20,21,21,21,21,21,21,21,21,21,22,22,22,22,22,22,22,22,22,23,23,23,23,23,23,23,23,23,24,24,24,24,24,24,24,24,24,25,25,25,25,25,25,25,25,25,26,26,26,26,26,26,26,26,26,27,27,27,27,27,27,27,27,27,28,28,28,28,28,28,28,28,28,29,29,29,29,29,29,29,29,29,30,30,30,30,30,30,30,30,30,31,31,31,31,31,31,31,31,31
_6:	.word	0,0,0,0,0,0,1,1,1,1,1,1,2,2,2,2,2,2,3,3,3,3,3,3,4,4,4,4,4,4,5,5,5,5,5,5,6,6,6,6,6,6,7,7,7,7,7,7,8,8,8,8,8,8,9,9,9,9,9,9,10,10,10,10,10,10,11,11,11,11,11,11,12,12,12,12,12,12,13,13,13,13,13,13,14,14,14,14,14,14,15,15,15,15,15,15,16,16,16,16,16,16,17,17,17,17,17,17,18,18,18,18,18,18,19,19,19,19,19,19,20,20,20,20,20,20,21,21,21,21,21,21,22,22,22,22,22,22,23,23,23,23,23,23,24,24,24,24,24,24,25,25,25,25,25,25,26,26,26,26,26,26,27,27,27,27,27,27,28,28,28,28,28,28,29,29,29,29,29,29,30,30,30,30,30,30,31,31,31,31,31,31
	.text
	.align	2						@
d9:	.word	_9						@	u32	d9[]={ ... }
d6:	.word	_6						@	u32	d6[]={ ... }
	.global	myfilter				@
	.type	myfilter, %function		@
ret	.req	r0
ori	.req	r1
i	.req	r2
j	.req	r3
p	.req	r4
s	.req	r5
x	.req	r6	
myfilter:
	.macro	test a
	.endm
	.rept	120
	.endr
    stmfd	sp!,{r0-r12,lr}			@60800(15200) 573040(307040)
	mov		r11,#480				@
	ldr		r9, d9
	ldr		r12,_d
	bic		r12,r12, #1
	mov		r2, #159				@	for(i(r2)=159 -> 0)
l0:									@	{
	mov		r4, #0					@
	mov		r6, #0					@
	ldrneh	r7, [r1, r11]			@
	blne	dec						@
	cmp		r2, #159				@	ldr		r9, d6
	ldrneh	r7, [r1, -r11]			@
	blne	dec						@
	ldrh	r7, [r1], #2			@
	bl		dec						@
	mov		r5, r6					@
	movs	r3, #239				@		for(j(r3)=239 ->0)
l1:									@		{
	sub		r5, r5, r4				@
	sub		r4, r5, r6				@			p <- c
	mov		r6, #0					@			x=0

	beq		l2						@
	cmp		r2, #159				@			{
	ldrneh	r7, [r1, -r11]			@				ori[i-1][j+1]
	blne	dec						@
	cmp		r2, #0					@
	ldrneh	r7, [r1, r11]			@				ori[i+1][j+1]
	blne	dec						@
	ldrh	r7, [r1], #2			@				ori[i][j+1]
	bl		dec						@
	add		r5, r5, r6				@				c+=x
l2:									@			}
	bx		r12						@
l3:
	strh	r7, [r0], #2			@			ret[i][j]
	subs	r3, r3, #1				@
	bhs		l1						@		}
	subs	r2, r2, #1				@
	bhs		l0						@	}
exit:								@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
	ldmfd	sp!,{r0-r12,lr}			@
    bx	lr							@	return
dec:								@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
	and		r8, r7, #0x3E0			@
	bic		r7, r7, #0x3E0			@
	add		r6, r6, r7				@	(decode)
	add		r6, r6, r8, lsl #16		@
	bx		lr						@	return
div4:								@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
	and		r8, r7, #0x7F0000		@
	mov		r7, r7, lsr #2			@
	bic		r7, r7, #0x3E0			@
	orr		r7, r7, r8, lsr #18		@
	bx		lr						@	return
div6:								@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
	ldr		r9,  d6
	bl		div
	ldr		r9,  d9
	ldr		r12, _d
	b		l3
div:
	mov		r7,  r5,      lsl #23
	ldr		r7, [r9,  r7, lsr #21]
	mov		r8,  r5,      lsl #13
	bic		r8,  r8,  #0x200000
	ldr		r8, [r9,  r8, lsr #21]
	orr		r7,  r7,  r8, lsl #10
	ldr		r8, [r9,  r5, lsr #19]
	orr		r7,  r7,  r8, lsl #5
	b		l3
	.size	myfilter, .-myfilter
	.ident	"GCC: (GNU) 3.3.2"
